import asyncio
import logging
import os

from aiogram import Bot, Dispatcher, F, Router
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import CallbackQuery, InlineKeyboardButton, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder


logging.basicConfig(level=logging.INFO)


def build_start_keyboard() -> InlineKeyboardBuilder:
    keyboard_builder = InlineKeyboardBuilder()
    keyboard_builder.row(InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="pay"))
    keyboard_builder.row(InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–∞–Ω–∞–ª–µ", callback_data="more_info"))
    keyboard_builder.row(InlineKeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question"))
    return keyboard_builder


def build_pay_keyboard() -> InlineKeyboardBuilder:
    keyboard_builder = InlineKeyboardBuilder()
    keyboard_builder.row(InlineKeyboardButton(text="1 –º–µ—Å—è—Ü", callback_data="pay_1_month"))
    keyboard_builder.row(InlineKeyboardButton(text="6 –º–µ—Å—è—Ü–µ–≤", callback_data="pay_6_months"))
    keyboard_builder.row(InlineKeyboardButton(text="12 –º–µ—Å—è—Ü–µ–≤", callback_data="pay_12_months"))
    keyboard_builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start"))
    return keyboard_builder


def build_subscription_keyboard() -> InlineKeyboardBuilder:
    keyboard_builder = InlineKeyboardBuilder()
    keyboard_builder.row(InlineKeyboardButton(text="–ö–∞—Ä—Ç–∞ (–ª—é–±–∞—è –≤–∞–ª—é—Ç–∞)", callback_data="pay_card"))
    keyboard_builder.row(InlineKeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question"))
    keyboard_builder.row(InlineKeyboardButton(text="üìú –î–æ–≥–æ–≤–æ—Ä –æ—Ñ–µ—Ä—Ç—ã", callback_data="offer_agreement"))
    keyboard_builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_pay"))
    return keyboard_builder


router = Router()


@router.message(CommandStart())
async def send_welcome(message: Message) -> None:
    start_text = (
        "<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é.</b> –¢—ã –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –ø–æ –æ–ø–ª–∞—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É –û–°–ù–û–í–ê - –≥–¥–µ –∑–Ω–∞–Ω–∏—è –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ü–µ–Ω–Ω—ã–µ, –∞, –∂–∏–∑–Ω–µ–Ω–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ.\n\n"
        "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ - –µ–∂–µ–º–µ—Å—è—á–Ω–∞—è 1500‚ÇΩ –∏–ª–∏ ~15$, –æ–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –≤ –ª—é–±–æ–π –≤–∞–ª—é—Ç–µ –∏ –∫—Ä–∏–ø—Ç–µ.\n"
        "‚¨áÔ∏è –ù–∏–∂–µ ‚Äî –∫–Ω–æ–ø–∫–∞. –ñ–º–µ—à—å ‚Äî –∏ –ø—Ä–æ—Ö–æ–¥–∏—à—å —Ç—É–¥–∞, –≥–¥–µ –ª—é–¥–∏ –Ω–µ –Ω–æ—é—Ç, –∞ –µ–±—É—Ç —ç—Ç–æ—Ç –º–∏—Ä –≤ –æ–±–µ —â–µ–∫–∏.\n\n"
        "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ - –µ–∂–µ–º–µ—Å—è—á–Ω–∞—è 1500‚ÇΩ –∏–ª–∏ ~14$, –æ–ø–ª–∞—Ç—É –ø—Ä–∏–Ω–∏–º–∞–µ–º –≤ –ª—é–±–æ–π –≤–∞–ª—é—Ç–µ, –∫—Ä–∏–ø—Ç–µ, –∑–≤–µ–∑–¥–∞—Ö.\n"
        "–ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è"
    )
    await message.answer(start_text, reply_markup=build_start_keyboard().as_markup())


@router.callback_query(F.data == "pay")
async def process_pay_callback(callback: CallbackQuery) -> None:
    await callback.answer()
    await callback.message.edit_text(
        (
            "üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ë–∞–∑—É\n"
            "1 –º–µ—Å—è—Ü 1500 —Ä—É–±–ª–µ–π\n6 –º–µ—Å—è—Ü–µ–≤ 8000 —Ä—É–±–ª–µ–π\n12 –º–µ—Å—è—Ü–µ–≤ 10 000 —Ä—É–±–ª–µ–π\n\n"
            "*—Ü–µ–Ω–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö/–µ–≤—Ä–æ - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ –Ω—ã–Ω–µ—à–Ω–µ–º—É –∫—É—Ä—Å—É\n\n"
            "*–æ–ø–ª–∞—á–∏–≤–∞–π –ª—é–±–æ–π –∫–∞—Ä—Ç–æ–π –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö/–µ–≤—Ä–æ/—Ä—É–±–ª—è—Ö, –±–æ—Ç —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å–∞–º\n\n"
            "–û–ø–ª–∞—Ç–∏—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø\nüëáüëáüëá"
        ),
        reply_markup=build_pay_keyboard().as_markup(),
    )


@router.callback_query(F.data.startswith("pay_"))
async def process_subscription_callback(callback: CallbackQuery) -> None:
    await callback.answer()
    parts = callback.data.split("_") if callback.data else []
    period_key = parts[1] if len(parts) > 1 else "1"
    period_text = {"1": "1 –º–µ—Å—è—Ü", "6": "6 –º–µ—Å—è—Ü–µ–≤", "12": "12 –º–µ—Å—è—Ü–µ–≤"}.get(period_key, "1 –º–µ—Å—è—Ü")
    await callback.message.edit_text(
        (
            f"ü¶ç –ó–ê–ö–†–´–¢–´–ô –ö–ê–ù–ê–õ \"–û–°–ù–û–í–ê\" –Ω–∞ {period_text}\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –≤–∏–¥ –æ–ø–ª–∞—Ç—ã:\n"
            "*–µ—Å–ª–∏ –≤—ã –∏–∑ –£–∫—Ä–∞–∏–Ω—ã, –≤–∫–ª—é—á–∏—Ç–µ vpn\n"
            "*–ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –∫–∞—Ä—Ç–æ–π - –æ—Ñ–æ—Ä–º–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏–µ, –∫–∞–∂–¥—ã–µ 30 –¥–Ω–µ–π\n"
            "*–¥–∞–ª–µ–µ - –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–æ–π –≤ –ú–µ–Ω—é –±–æ—Ç–∞\n"
            "*–æ–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–π –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ —Ç–∞—Ä–∏—Ñ–∞—Ö –Ω–∞ 6/12 –º–µ—Å"
        ),
        reply_markup=build_subscription_keyboard().as_markup(),
    )


@router.callback_query(F.data == "more_info")
async def process_more_info_callback(callback: CallbackQuery) -> None:
    await callback.answer()
    info_text = (
        "–û–°–ù–û–í–ê ‚Äî —ç—Ç–æ –∑–æ–ª–æ—Ç–æ–π —Ä—é–∫–∑–∞–∫ –∑–Ω–∞–Ω–∏–π, —Å –∫–æ—Ç–æ—Ä—ã–º —Ç—ã –º–æ–∂–µ—à—å –≤—ã–ª–µ–∑—Ç–∏ –∏–∑ –ª—é–±–æ–π –∂–æ–ø—ã.\n\n"
        "–¢—É—Ç –Ω–µ –ø—Ä–æ—Å—Ç–æ \"–º–æ—Ç–∏–≤–∞—Ü–∏—è\" –∏ \"—Ä–∞–∑–≤–∏—Ç–∏–µ\", –∞ —Ä–∞–±–æ—á–∏–µ —Å—Ö–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –Ω–µ –Ω–∞–π–¥—ë—à—å –¥–∞–∂–µ –µ—Å–ª–∏ –±—É–¥–µ—à—å –∫–æ–ø–∞—Ç—å –µ–±—É—á–∏–π –î–∞—Ä–∫–Ω–µ—Ç.\n\n"
        "üß† –ü–æ–¥–∫–∞—Å—Ç—ã —Å —Ç–∞–π–º–∫–æ–¥–∞–º–∏ ‚Äî –æ—Ç –ü–†–û–§–ê–ô–õ–ò–ù–ì–ê –¥–æ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π –±–∞–±, –æ—Ç –ü–°–ò–•–û–¢–ò–ü–û–í –¥–æ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å–ø–µ—Ü—Å–ª—É–∂–±\n"
        "üíâ –û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π –ë–ò–û–•–ê–ö–ò–ù–ì ‚Äî –ø–æ—á–µ–º—É —Ç–µ–±–µ –ø–ª–æ—Ö–æ –∏ –∫–∞–∫ —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –±–æ–≥–æ–º\n"
        "üí∏ –£—Ä–æ–∫–∏ –ø–æ –§–†–û–î–£, –≥–¥–µ –∏–∑ –Ω—É–ª—è –¥–µ–ª–∞–µ—Ç—Å—è $5000+ –≤ –º–µ—Å—è—Ü, –µ—Å–ª–∏ –Ω–µ –µ–±–ª–∞–Ω\n"
        "üß± –ö–∞–∫ –≤—ã—Å—Ç—Ä–æ–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É, –æ—Ç—à–∏—Ç—å —Å–∞–º–æ–±–∏—á–µ–≤–∞–Ω–∏–µ –∏ –Ω–∞–∫–æ–Ω–µ—Ü —Å—Ç–∞—Ç—å –º–∞—à–∏–Ω–æ–π, –∞ –Ω–µ –º—è–º–ª–µ–π\n"
        "üìà –ê–≤—Ç–æ—Ä—Å–∫–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É ‚Äî –æ—Ç $500/–º–µ—Å –Ω–∞ –∞–≤—Ç–æ–ø–∏–ª–æ—Ç–µ\n"
        "‚ö° –°–∫–∞–ª—å–ø–∏–Ω–≥ –∏ –±–∏—Ä–∂–∏ ‚Äî –∫–∞–∫ —Ö–∏—Ç—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É, –Ω–µ —Ç–µ—Ä—è—è –±–∞–±–∫–∏ –Ω–∞ –∫–æ–º–∏—Å—Å–∏—è—Ö\n"
        "üé• –°—Ç—Ä–∏–º—ã –∫–∞–∂–¥—ã–µ 2 –Ω–µ–¥–µ–ª–∏, –≥–¥–µ —Ä–∞–∑–±–∏—Ä–∞—é –≤–æ–ø—Ä–æ—Å—ã –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: –∑–¥–æ—Ä–æ–≤—å–µ, –¥–µ–Ω—å–≥–∏, –ø—Å–∏—Ö–∏–∫–∞, –º—ã—à–ª–µ–Ω–∏–µ\n\n"
        "–ò —ç—Ç–æ –ª–∏—à—å –º–∞–ª–∞—è —á–∞—Å—Ç—å —Ç–æ–≥–æ, —á—Ç–æ —Ç–µ–±—è –æ–∂–∏–¥–∞–µ—Ç –≤ –§–æ—Ä–º—É–ª–µ.\n\n"
        "–≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∫–∞–Ω–∞–ª. –≠—Ç–æ —Å–∏–ª–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ç–≤–æ–µ –º—ã—à–ª–µ–Ω–∏–µ –ø–æ–¥ –Ω–æ–≤–æ–≥–æ —Ç–µ–±—è.\n"
        "–í–æ–∫—Ä—É–≥ —Ç–µ–±—è ‚Äî –º–∏–ª–ª–∏–æ–Ω —Å–ø–æ—Å–æ–±–æ–≤ —Å–¥–µ–ª–∞—Ç—å –±–∞–±–∫–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–¥–µ–π –∏ –Ω–µ –ø–∞—Ö–∞—Ç—å, –ø–æ–∫–∞ –¥—Ä—É–≥–∏–µ –ø–∞—à—É—Ç.\n\n"
        "–¢—ã –±—É–¥–µ—à—å —Å—á–∏—Ç—ã–≤–∞—Ç—å –ª—é–¥–µ–π —Å –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏–∑ –≤–æ–∑–¥—É—Ö–∞ –∏ –Ω–µ—Å—Ç–∏ —Å–µ–±—è –∫–∞–∫ –∫–æ—Ä–æ–ª—å, –ø–æ—Ç–æ–º—É —á—Ç–æ –∑–Ω–∞–µ—à—å –±–æ–ª—å—à–µ, —á–µ–º –æ–Ω–∏ –∫–æ–≥–¥–∞-–ª–∏–±–æ –ø–æ–π–º—É—Ç.\n\n"
        "–ö–Ω–æ–ø–∫–∞ –≤–Ω–∏–∑—É ‚¨áÔ∏è. –¢–∞–º –Ω–µ –ø—Ä–æ—Å—Ç–æ –∏–Ω—Ñ–∞. –¢–∞–º –≤—ã—Ö–æ–¥ –∏–∑ —Å—Ç–∞–¥–∞.\n"
        "–†–µ—à–∞–π."
    )
    keyboard_builder = InlineKeyboardBuilder()
    keyboard_builder.row(InlineKeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question"))
    keyboard_builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start"))
    await callback.message.edit_text(info_text, reply_markup=keyboard_builder.as_markup())


@router.callback_query(F.data == "ask_question")
async def process_ask_question_callback(callback: CallbackQuery) -> None:
    await callback.answer()
    keyboard_builder = InlineKeyboardBuilder()
    keyboard_builder.row(
        InlineKeyboardButton(
            text="–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
            url="https://acqu1red.github.io/tgkprivate/",
        )
    )
    await callback.message.answer(
        "–û—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞:",
        reply_markup=keyboard_builder.as_markup(),
    )


@router.callback_query(F.data == "back_to_start")
async def process_back_to_start_callback(callback: CallbackQuery) -> None:
    await callback.answer()
    start_text = (
        "<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é.</b> –¢—ã –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –ø–æ –æ–ø–ª–∞—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É –û–°–ù–û–í–ê - –≥–¥–µ –∑–Ω–∞–Ω–∏—è –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ü–µ–Ω–Ω—ã–µ, –∞, –∂–∏–∑–Ω–µ–Ω–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ.\n\n"
        "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ - –µ–∂–µ–º–µ—Å—è—á–Ω–∞—è 1500‚ÇΩ –∏–ª–∏ ~15$, –æ–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –≤ –ª—é–±–æ–π –≤–∞–ª—é—Ç–µ –∏ –∫—Ä–∏–ø—Ç–µ.\n"
        "‚¨áÔ∏è –ù–∏–∂–µ ‚Äî –∫–Ω–æ–ø–∫–∞. –ñ–º–µ—à—å ‚Äî –∏ –ø—Ä–æ—Ö–æ–¥–∏—à—å —Ç—É–¥–∞, –≥–¥–µ –ª—é–¥–∏ –Ω–µ –Ω–æ—é—Ç, –∞ –µ–±—É—Ç —ç—Ç–æ—Ç –º–∏—Ä –≤ –æ–±–µ —â–µ–∫–∏.\n\n"
        "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ - –µ–∂–µ–º–µ—Å—è—á–Ω–∞—è 1500‚ÇΩ –∏–ª–∏ ~14$, –æ–ø–ª–∞—Ç—É –ø—Ä–∏–Ω–∏–º–∞–µ–º –≤ –ª—é–±–æ–π –≤–∞–ª—é—Ç–µ, –∫—Ä–∏–ø—Ç–µ, –∑–≤–µ–∑–¥–∞—Ö.\n"
        "–ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è"
    )
    await callback.message.edit_text(start_text, reply_markup=build_start_keyboard().as_markup())


@router.callback_query(F.data == "back_to_pay")
async def process_back_to_pay_callback(callback: CallbackQuery) -> None:
    await callback.answer()
    await callback.message.edit_text(
        (
            "üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ë–∞–∑—É\n"
            "1 –º–µ—Å—è—Ü 1500 —Ä—É–±–ª–µ–π\n6 –º–µ—Å—è—Ü–µ–≤ 8000 —Ä—É–±–ª–µ–π\n12 –º–µ—Å—è—Ü–µ–≤ 10 000 —Ä—É–±–ª–µ–π\n\n"
            "*—Ü–µ–Ω–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö/–µ–≤—Ä–æ - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ –Ω—ã–Ω–µ—à–Ω–µ–º—É –∫—É—Ä—Å—É\n\n"
            "*–æ–ø–ª–∞—á–∏–≤–∞–π –ª—é–±–æ–π –∫–∞—Ä—Ç–æ–π –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö/–µ–≤—Ä–æ/—Ä—É–±–ª—è—Ö, –±–æ—Ç —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å–∞–º\n\n"
            "–û–ø–ª–∞—Ç–∏—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø\nüëáüëáüëá"
        ),
        reply_markup=build_pay_keyboard().as_markup(),
    )


async def main() -> None:
    # Load environment variables from .env if present
    try:
        from dotenv import load_dotenv  # type: ignore
        load_dotenv()
    except Exception:
        pass

    token = os.getenv("BOT_TOKEN")
    if not token:
        logging.warning("BOT_TOKEN is not set; falling back to embedded token")
        token = "8354723250:AAEWcX6OojEi_fN-RAekppNMVTAsQDU0wvo"

    bot = Bot(token=token, parse_mode=ParseMode.HTML)
    dp = Dispatcher()
    dp.include_router(router)
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())


if __name__ == "__main__":
    asyncio.run(main())


